import os

from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from utils.models import Services, Appointments, Users
from utils.keyboards import services_kb, get_time_kb
from utils.states import CalendarState
from aiogram_dialog import DialogManager, StartMode, Dialog, Window
from aiogram_dialog.widgets.text import Const
from aiogram_dialog.widgets.kbd import Calendar
from datetime import date, datetime

appointment_router = Router()


@appointment_router.callback_query(F.data == 'get_appointment')
async def get_appointment_handler(callback: CallbackQuery):
    await callback.answer()
    services = Services.select()
    await callback.message.answer('ü§î –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
                                  reply_markup=services_kb(services))


@appointment_router.callback_query(F.data.startswith('get_service'))
async def get_service_handler(callback: CallbackQuery, state: FSMContext, dialog_manager: DialogManager):
    service = Services.get_by_id(int(callback.data.split()[1]))
    await state.update_data(service=service)
    await callback.answer(f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {service.name}', show_alert=True)
    await dialog_manager.start(CalendarState.choice_appointment, mode=StartMode.RESET_STACK)


async def on_date_selected(callback: CallbackQuery, widget,
                           manager: DialogManager, selected_date: date):
    await manager.done()
    await callback.message.edit_text(f'üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date.strftime("%d/%m/%y")}\n'
                                     f'–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏',
                                     reply_markup=get_time_kb(str(selected_date)))


dialog = Dialog(Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏"),
        Calendar(id='calendar', on_click=on_date_selected),
        state=CalendarState.choice_appointment,),)
appointment_router.include_router(dialog)


@appointment_router.callback_query(F.data.startswith('get_time'))
async def get_time_handler(callback: CallbackQuery, state: FSMContext):
    cmd, date, time = callback.data.split()
    appointment_date = datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
    if appointment_date < datetime.now():
        return await callback.answer('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è!')
    appointment = Appointments.get_or_none(Appointments.date_time == appointment_date)
    data = await state.get_data()
    if not appointment:
        await state.clear()
        await callback.answer()
        user = Users.get_or_none(Users.user_id == callback.from_user.id)
        Appointments.create(user=user, service=data['service'], date_time=appointment_date)
        await callback.message.answer(f'''‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É {data["service"].name}
üìå –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {appointment_date.strftime("%d/%m/%Y - %H:%M")}''')
        for admin in os.getenv('ADMINS').split(','):
            await callback.bot.send_message(int(admin), f'''üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n
üë§ –§–ò–û: {user.fullname}
üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone_number}
üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {appointment_date.strftime("%d/%m/%Y - %H:%M")}''')
    else:
        await callback.answer('‚ùå –≠—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —É–∂–µ –∑–∞–Ω—è—Ç–æ!')
